- name: Upload all the custom generated ISOs to the datastore
  community.vmware.vsphere_copy:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    datastore: "{{ vcenter.datastore }}"
    validate_certs: no
    src: "{{ iso_dir }}/{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}.iso"
    path: "{{ vcenter.iso_dir }}/{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}.iso"
  loop: "{{ nodes }}"
  loop_control:
    label: "'{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}.iso' -> '{{ vcenter.datastore }}/{{ vcenter.iso_dir }}/{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}.iso'"
  when: skip_iso is not defined

- name: Create bootstrap and master VMs from the template
  vmware_guest:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    guest_id: "rhel8_64Guest"
    validate_certs: no
    folder: "{{ vcenter.folder_absolute_path }}"
    name: "{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}"
    state: poweredon
    disk:
    - size_gb: "{{ item.size_gb | default(120) }}"
      type: thin
      datastore: "{{ vcenter.datastore }}"
    hardware:
      memory_mb: "{{ item.ram | default(16384) }}"
      num_cpus: "{{ item.cpu | default(4) }}"
      memory_reservation_lock: True
      version: "{{ vcenter.hw_version }}"
    networks:
    - name: "{{ vcenter.network }}"
      mac: "{{ item.macaddr | default(omit) }}"
    cdrom:
    - state: present
      controller_number: 0
      unit_number: 0
      type: iso
      iso_path: "[{{ vcenter.datastore }}] {{ vcenter.iso_dir }}/{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}.iso"
    wait_for_ip_address: no
    customvalues:
      - key: guestinfo.ignition.config.data
        value: "{{ bootstrapContent }}"
      - key: guestinfo.ignition.config.data.encoding
        value: base64
      - key: disk.EnableUUID
        value: TRUE
  loop: "{{ bootstrap_vms + master_vms }}"
  loop_control:
    label: "{{ item.name }}"

- name: Create worker VMs from the template
  vmware_guest:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    guest_id: "rhel8_64Guest"
    validate_certs: no
    folder: "{{ vcenter.folder_absolute_path }}"
    name: "{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}"
    state: poweredoff
    disk:
    - size_gb: "{{ item.size_gb | default(120) }}"
      type: thin
      datastore: "{{ vcenter.datastore }}"
    hardware:
      memory_mb: "{{ item.ram | default(16384) }}"
      num_cpus: "{{ item.cpu | default(4) }}"
      memory_reservation_lock: True
      version: "{{ vcenter.hw_version }}"
    networks:
    - name: "{{ vcenter.network }}"
      mac: "{{ item.macaddr | default(omit) }}"
    cdrom:
    - state: present
      controller_number: 0
      unit_number: 0
      type: iso
      iso_path: "[{{ vcenter.datastore }}] {{ vcenter.iso_dir }}/{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}.iso"
    wait_for_ip_address: no
    customvalues:
      - key: guestinfo.ignition.config.data
        value: "{{ workerContent }}"
      - key: guestinfo.ignition.config.data.encoding
        value: base64
      - key: disk.EnableUUID
        value: TRUE
  loop: "{{ worker_vms|default([]) }}"
  loop_control:
    label: "{{ item.name }}"
