- name: Upload all the custom generated ISOs to the datastore
  community.vmware.vsphere_copy:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.service_account_username }}"
    password: "{{ vcenter.service_account_password }}"
    datacenter: "{{ vcenter.datacenter }}"
    datastore: "{{ vcenter.datastore }}"
    validate_certs: no
    src: "{{ iso_dir }}/{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}.iso"
    path: "{{ vcenter.iso_dir }}/{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}.iso"
  loop: "{{ nodes }}"
  loop_control:
    label: "'{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}.iso' -> '{{ vcenter.datastore }}/{{ vcenter.iso_dir }}/{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}.iso'"
  when: skip_iso is not defined

- name: Create bootstrap VM from the template
  vmware_guest:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.service_account_username }}"
    password: "{{ vcenter.service_account_password }}"
    datacenter: "{{ vcenter.datacenter }}"
    guest_id: "rhel8_64Guest"
    validate_certs: no
    folder: "{{ vcenter.folder_absolute_path }}"
    name: "{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}"
    state: poweredoff
    disk:
    - size_gb: "{{ item.size_gb | default(120) }}"
      type: thin
      datastore: "{{ vcenter.datastore }}"
    hardware:
      memory_mb: "{{ item.ram | default(16384) }}"
      num_cpus: "{{ item.cpu | default(4) }}"
      memory_reservation_lock: True
      version: "{{ vcenter.hw_version }}"
    networks:
    - name: "{{ vcenter.network }}"
      mac: "{{ item.macaddr | default(omit) }}"
    wait_for_ip_address: no
    customvalues:
      - key: guestinfo.ignition.config.data
        value: "{{ bootstrapContent }}"
      - key: guestinfo.ignition.config.data.encoding
        value: base64
      - key: disk.EnableUUID
        value: TRUE
    loop: "{{ bootstrap_vms }}"
    loop_control:
      label: "{{ item.name }}"

- name: Create control plane VMs from the template
  vmware_guest:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.service_account_username }}"
    password: "{{ vcenter.service_account_password }}"
    datacenter: "{{ vcenter.datacenter }}"
    guest_id: "rhel8_64Guest"
    validate_certs: no
    folder: "{{ vcenter.folder_absolute_path }}"
    name: "{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}"
    state: poweredoff
    disk:
    - size_gb: "{{ item.size_gb | default(120) }}"
      type: thin
      datastore: "{{ vcenter.datastore }}"
    hardware:
      memory_mb: "{{ item.ram | default(16384) }}"
      num_cpus: "{{ item.cpu | default(8) }}"
      memory_reservation_lock: True
      version: "{{ vcenter.hw_version }}"
    networks:
    - name: "{{ vcenter.network }}"
      mac: "{{ item.macaddr | default(omit) }}"
    wait_for_ip_address: no
    customvalues:
      - key: guestinfo.ignition.config.data
        value: "{{ masterContent }}"
      - key: guestinfo.ignition.config.data.encoding
        value: base64
      - key: disk.EnableUUID
        value: TRUE
    loop: "{{ master_vms }}"
    loop_control:
      label: "{{ item.name }}"

- name: Gather some info from all control plane nodes
  vmware_guest_info:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.admin_username }}"
    password: "{{ vcenter.admin_password }}"
    datacenter: "{{ vcenter.datacenter }}"
    name: "{{item.name}}.{{config.cluster_name}}.{{config.base_domain}}"
    schema: "vsphere"
    properties: ["config.name", "config.hardware.device"]
  register: control_vm_info
  loop: "{{ master_vms + bootstrap_vms }}"
  loop_control:
    label: "Gathering info from {{ item.name }}"

- name: Get list of control plane devices
  vars:
    devices: "{{ item.instance.config.hardware.device | map(attribute='_vimtype') | list }}"
  set_fact:
    control_device_list: "{{ control_device_list|default({}) | combine( { item.instance.config.name.split('.')[0]: { 'name':item.instance.config.name.split('.')[0], 'devices': devices|list } } ) }}"
  loop: "{{control_vm_info.results}}"
  loop_control:
    label: "Defining devices on {{ item.instance.config.name.split('.')[0] }}"

- name: Add a cdrom device to all the boostrap and master VMs
  command: 'govc device.cdrom.add -vm "{{ vcenter.folder_absolute_path }}/{{ item.key }}.{{config.cluster_name}}.{{config.base_domain}}"' # noqa 301
  loop: "{{ control_device_list | dict2items }}"
  loop_control:
    label: "Adding cd to {{ item.key }}"
  when: "'vim.vm.device.VirtualCdrom' not in item.value.devices"

- name: Insert the uploaded ISO file into boostrap and master VMs
  command: 'govc device.cdrom.insert -vm "{{ vcenter.folder_absolute_path }}/{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}" -ds {{ vcenter.datastore }} ./{{ vcenter.iso_dir }}/{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}.iso' # noqa 301
  loop: "{{ bootstrap_vms + master_vms }}"

- name: Power on bootstrap VM
  vmware_guest:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.service_account_username }}"
    password: "{{ vcenter.service_account_password }}"
    datacenter: "{{ vcenter.datacenter }}"
    validate_certs: no
    folder: "{{ vcenter.folder_absolute_path }}"
    name: "{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}"
    state: poweredon
  loop: "{{ bootstrap_vms }}"

- name: Power on control plane VMs
  vmware_guest:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.service_account_username }}"
    password: "{{ vcenter.service_account_password }}"
    datacenter: "{{ vcenter.datacenter }}"
    validate_certs: no
    folder: "{{ vcenter.folder_absolute_path }}"
    name: "{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}"
    state: poweredon
  loop: "{{ master_vms }}"

- name: Create worker VMs from the template
  vmware_guest:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.service_account_username }}"
    password: "{{ vcenter.service_account_password }}"
    datacenter: "{{ vcenter.datacenter }}"
    guest_id: "rhel8_64Guest"
    validate_certs: no
    folder: "{{ vcenter.folder_absolute_path }}"
    name: "{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}"
    state: poweredoff
    disk:
    - size_gb: "{{ item.size_gb | default(120) }}"
      type: thin
      datastore: "{{ vcenter.datastore }}"
    hardware:
      memory_mb: "{{ item.ram | default(16384) }}"
      num_cpus: "{{ item.cpu | default(4) }}"
      memory_reservation_lock: True
      version: "{{ vcenter.hw_version }}"
    networks:
    - name: "{{ vcenter.network }}"
      mac: "{{ item.macaddr | default(omit) }}"
    wait_for_ip_address: no
    customvalues:
      - key: guestinfo.ignition.config.data
        value: "{{ workerContent }}"
      - key: guestinfo.ignition.config.data.encoding
        value: base64
      - key: disk.EnableUUID
        value: TRUE
    loop: "{{ worker_vms }}"
    loop_control:
      label: "{{ item.name }}"

- name: Gather some info from all worker nodes
  vmware_guest_info:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.admin_username }}"
    password: "{{ vcenter.admin_password }}"
    datacenter: "{{ vcenter.datacenter }}"
    name: "{{item.name}}.{{config.cluster_name}}.{{config.base_domain}}"
    schema: "vsphere"
    properties: ["config.name", "config.hardware.device"]
  register: compute_vm_info
  loop: "{{ worker_vms }}"
  loop_control:
    label: "Gathering info from {{ item.name }}"
  when: "worker_vms is defined and not config.hybrid | bool"

- name: Get list of worker devices
  when: not config.hybrid | bool
  vars:
    devices: "{{ item.instance.config.hardware.device | map(attribute='_vimtype') | list }}"
  set_fact:
    worker_device_list: "{{ worker_device_list|default({}) | combine( { item.instance.config.name.split('.')[0]: { 'name':item.instance.config.name.split('.')[0], 'devices': devices|list } } ) }}"
  loop: "{{compute_vm_info.results}}"
  loop_control:
    label: "Defining devices on workers"

- name: Setup worker VMs if it not hybrid
  include: vm_worker.yml
  when: "worker_device_list is defined and worker_vms is defined"
