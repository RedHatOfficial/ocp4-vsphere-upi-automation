- name: Upload all the custom generated ISOs to the datastore
  community.vmware.vsphere_copy:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    datastore: "{{ vcenter.datastore }}"
    validate_certs: false
    src: "{{ iso_dir }}/{{ item.name }}.{{ config.cluster_name }}.{{ config.base_domain }}.iso"
    path: "{{ vcenter.iso_dir }}/{{ item.name }}.{{ config.cluster_name }}.{{ config.base_domain }}.iso"
  loop: "{{ nodes }}"
  loop_control:
    label: "'{{ item.name }}.{{ config.cluster_name }}.{{ config.base_domain }}.iso' -> '{{ vcenter.datastore }}/{{ vcenter.iso_dir }}/{{ item.name }}.{{ config.cluster_name }}.{{ config.base_domain }}.iso'"
  when: skip_iso is not defined

- name: Create bootstrap and master VMs from the template
  community.vmware.vmware_guest:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    guest_id: "rhel8_64Guest"
    validate_certs: false
    folder: "{{ vcenter.folder_absolute_path }}"
    name: "{{ item.name }}.{{ config.cluster_name }}.{{ config.base_domain }}"
    state: poweredoff
    disk:
      - size_gb: "{{ item.size_gb | default(120) }}"
        type: thin
        datastore: "{{ vcenter.datastore }}"
    hardware:
      memory_mb: "{{ item.ram | default(16384) }}"
      num_cpus: "{{ item.cpu | default(4) }}"
      num_cpu_cores_per_socket: "{{ vm_mods.master_cores_per_socket | default(omit) }}"
      memory_reservation_lock: true
      version: "{{ vcenter.hw_version }}"
      hotadd_cpu: "{{ item.hotadd_cpu | default(omit) }}"
      hotremove_cpu: "{{ vm_mods.hotremove_cpu | default(omit) }}"
      hotadd_memory: "{{ vm_mods.hotadd_memory | default(omit) }}"
    cdrom:
      - state: present
        controller_number: 0
        unit_number: 0
        type: iso
        iso_path: "[{{ vcenter.datastore }}] {{ vcenter.iso_dir }}/{{ item.name }}.{{ config.cluster_name }}.{{ config.base_domain }}.iso"
    wait_for_ip_address: false
    advanced_settings:
      - key: guestinfo.ignition.config.data
        value: "{{ bootstrap_content.content if item.type == 'bootstrap' else master_content.content }}"
      - key: guestinfo.ignition.config.data.encoding
        value: base64
      - key: disk.EnableUUID
        value: "TRUE"
  loop: "{{ bootstrap_vms + master_vms }}"
  loop_control:
    label: "{{ item.name }}"

- name: Configure network for bootstrap and master VMs
  community.vmware.vmware_guest_network:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    validate_certs: false
    name: "{{ item.name }}.{{ config.cluster_name }}.{{ config.base_domain }}"
    network_name: "{{ vcenter.network }}"
    mac_address: "{{ item.macaddr | default(omit) }}"
    state: present
    start_connected: true
  loop: "{{ bootstrap_vms + master_vms }}"
  loop_control:
    label: "{{ item.name }} on"

- name: Start bootstrap and master VMs
  community.vmware.vmware_guest:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    guest_id: "rhel8_64Guest"
    validate_certs: false
    folder: "{{ vcenter.folder_absolute_path }}"
    name: "{{ item.name }}.{{ config.cluster_name }}.{{ config.base_domain }}"
    state: poweredon
  loop: "{{ bootstrap_vms + master_vms }}"
  loop_control:
    label: "{{ item.name }} on"

- name: Create worker VMs from the template
  community.vmware.vmware_guest:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    guest_id: "rhel8_64Guest"
    validate_certs: false
    folder: "{{ vcenter.folder_absolute_path }}"
    name: "{{ item.name }}.{{ config.cluster_name }}.{{ config.base_domain }}"
    state: poweredoff
    disk:
      - size_gb: "{{ item.size_gb | default(120) }}"
        type: thin
        datastore: "{{ vcenter.datastore }}"
    hardware:
      memory_mb: "{{ item.ram | default(16384) }}"
      num_cpus: "{{ item.cpu | default(4) }}"
      num_cpu_cores_per_socket: "{{ vm_mods.worker_cores_per_socket | default(omit) }}"
      memory_reservation_lock: true
      version: "{{ vcenter.hw_version }}"
    cdrom:
      - state: present
        controller_number: 0
        unit_number: 0
        type: iso
        iso_path: "[{{ vcenter.datastore }}] {{ vcenter.iso_dir }}/{{ item.name }}.{{ config.cluster_name }}.{{ config.base_domain }}.iso"
        hotadd_cpu: "{{ vm_mods.hotadd_cpu | default(omit) }}"
        hotremove_cpu: "{{ vm_mods.hotremove_cpu | default(omit) }}"
        hotadd_memory: "{{ vm_mods.hotadd_memory | default(omit) }}"
    wait_for_ip_address: false
    advanced_settings:
      - key: guestinfo.ignition.config.data
        value: "{{ worker_content.content }}"
      - key: guestinfo.ignition.config.data.encoding
        value: base64
      - key: disk.EnableUUID
        value: "TRUE"
  loop: "{{ worker_vms | default([]) }}"
  loop_control:
    label: "{{ item.name }}"

- name: Configure network for worker VMs
  community.vmware.vmware_guest_network:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    validate_certs: false
    name: "{{ item.name }}.{{ config.cluster_name }}.{{ config.base_domain }}"
    network_name: "{{ vcenter.network }}"
    mac_address: "{{ item.macaddr | default(omit) }}"
    state: present
    start_connected: true
  loop: "{{ worker_vms | default([]) }}"
  loop_control:
    label: "{{ item.name }}"
