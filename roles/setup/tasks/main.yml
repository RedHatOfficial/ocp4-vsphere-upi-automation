############################################################################################################################################
### Setup
############################################################################################################################################

- name: Set vcenter folder variables
  when: vcenter.parent_folder is defined and vcenter.parent_folder
  block:
    - name: Check if parent folder looks correct
      ansible.builtin.fail:
        msg: "Bailing out: vcenter.parent_folder does not look like a correct path '{{ vcenter.parent_folder }}' (cannot be just /)"
      when: vcenter.parent_folder is not match('^\/?[a-zA-Z0-9_ -]+(\/[a-zA-Z0-9_ -]+)*\/?$')

    - name: Set parent folder variable
      ansible.builtin.set_fact:
        parent_folder: "{{ vcenter.parent_folder | regex_replace('^/', '') | regex_replace('/$', '') }}/"

- name: Set bootstrap variables
  ansible.builtin.set_fact:
    webserver_uri: "{{ helper_vm_protocol }}://{{ helper_vm }}{% if helper_vm_port != 80 %}:{{ helper_vm_port }}{% endif %}"
    bootstrap_ignition_url: "{{ helper_vm_protocol }}://{{ helper_vm }}{% if helper_vm_port != 80 %}:{{ helper_vm_port }}{% endif %}/{{ cluster }}/ignition/bootstrap.ign"
    vcenter: "{{ vcenter | combine({'folder_absolute_path': '/' + vcenter.datacenter + '/vm/' + parent_folder | default('') + cluster}, recursive=True) }}"

- name: Update config.cluster_base_version var
  vars:
    cbv_arr: "{% if config.cluster_version | regex_search('latest') == 'latest' or config.cluster_version | regex_search('stable') == 'stable' %}{{ config.cluster_version | regex_search('.*-.*') | split('-') | last | split('.') }}{% else %}{{ config.cluster_version | split('.') }}{% endif %}"
    cbv: "{{ cbv_arr[0] + '.' + cbv_arr[1] }}"
  ansible.builtin.set_fact:
    config: "{{ config | ansible.builtin.combine({'cluster_base_version': cbv}, recursive=True, list_merge='keep') }}"

- name: Fetch the content of the release.txt from the clients downloads page
  ansible.builtin.uri:
    url: "{{ download.clients_url }}/release.txt"
    return_content: true
  register: release_content

- name: Update config.cluster_base_version release_version which will be used later
  ansible.builtin.set_fact:
    config: "{{ config | combine({item.key: item.value}, recursive=True) }}"
  loop:
    - { key: "release_version", value: "{{ release_content.content | regex_search(config.cluster_base_version + '.[0-9]+') }}" }

- name: Update the registry.product_release_version var if registry is enabled
  ansible.builtin.set_fact:
    registry: "{{ registry | combine({'product_release_version': config.release_version + '-x86_64'}, recursive=True, list_merge='keep') }}"
  when: registry.enabled | bool

- name: Update download.dependencies_url
  ansible.builtin.set_fact:
    download: "{{ download | combine({'dependencies_url': 'https://mirror.openshift.com/pub/openshift-v4/x86_64/dependencies/rhcos/' + config.cluster_base_version + '/latest'}) }}"

############################################################################################################################################
### Cache
############################################################################################################################################

- name: Fetch the content of the sha256sum.txt from the clients downloads page
  ansible.builtin.uri:
    url: "{{ download.clients_url }}/sha256sum.txt"
    return_content: true
  register: clients_content

- name: Fetch the content of the sha256sum.txt from the dependencies downloads page
  ansible.builtin.uri:
    url: "{{ download.dependencies_url }}/sha256sum.txt"
    return_content: true
  register: dependencies_content

- name: Set the download facts for webservers group, which will be used later
  ansible.builtin.set_fact:
    download: "{{ download | combine({item.key: item.value}, recursive=True) }}"
  when: "'webservers' in group_names"
  loop:
    - { key: "raw", value: "{{ download.dependencies_url }}/{{ dependencies_content.content | regex_search('rhcos-metal[.].*.raw.gz') }}" }
    - { key: "kernel", value: "{{ download.dependencies_url }}/{{ dependencies_content.content | regex_search('rhcos.*kernel.*') }}" }
    - { key: "initramfs", value: "{{ download.dependencies_url }}/{{ dependencies_content.content | regex_search('rhcos.*initramfs.*') }}" }

- name: Set fact for mac vs linux binaries to download
  ansible.builtin.set_fact:
    family: "{{ 'mac' if ansible_os_family == 'Darwin' else 'linux' }}"

- name: Set the download facts for localhost, which will be used later
  ansible.builtin.set_fact:
    download: "{{ download | combine({item.key: item.value}, recursive=True) }}"
  loop:
    - {key: "iso", value: "{{ download.dependencies_url }}/{{ dependencies_content.content | regex_search('rhcos.*.iso') }}"}
    - {key: "ova", value: "{{ download.dependencies_url }}/{{ dependencies_content.content | regex_search('rhcos.*.ova') }}"}
    - {key: "openshiftClient", value: "{{ download.clients_url }}/{{ clients_content.content | regex_search('openshift-client-' + family + '-.*.tar.gz') }}"}
    - {key: "openshiftInstall", value: "{{ download.clients_url }}/{{ clients_content.content | regex_search('openshift-install-' + family + '-.*.tar.gz') }}"}


########################################################################################################################################################
### Pre install
########################################################################################################################################################

- name: Make sure networkType is valid when defined
  ansible.builtin.assert:
    that:
      - config.networkType in [ 'OpenShiftSDN', 'OVNKubernetes' ]
    fail_msg:
      - config.networkType = {{ config.networkType }}
      - config.networkType must be OpenShiftSDN or OVNKubernetes
    success_msg: config.network is valid
  when: config.networkType is defined

- name: Make sure isolationMode is valid when defined
  ansible.builtin.assert:
    that:
      - config.isolationMode in [ 'NetworkPolicy', 'Multitenant', 'Subnet' ]
    fail_msg:
      - config.isolationMode = {{ config.isolationMode }}
      - config.isolationMode must be NetworkPolicy, Multitenant, or Subnet
    success_msg: config.isolationMode is valid
  when: config.isolationMode is defined

- name: Create ~/.ssh directory if it does not exist
  ansible.builtin.file:
    path: ~/.ssh
    state: directory
    mode: '0755'

- name: Generate a SSH key-pair
  community.crypto.openssh_keypair:
    path: "~/.ssh/{{ cluster }}_id_rsa"
    force: false
  register: generated_ssh

- name: Set installer ssh key variable
  ansible.builtin.set_fact:
    installer_ssh_key: "{{ generated_ssh.public_key }}"

- name: Set the datacenter variable
  ansible.builtin.set_fact:
    datacenter: "{{ vcenter.datacenter }}"

- name: Install the necessary linux packages which will be needed later in the ansible run
  when: ansible_os_family != 'Darwin'
  ansible.builtin.package:
    name:
      - patch
      - gzip
      - genisoimage
      - jq
      - rsync
  become: true

- name: Display Ansible's Python version
  ansible.builtin.debug:
    var: ansible_python_version
    verbosity: 1

- name: Install python-pip or python2-pip if Ansible uses Python 2
  ansible.builtin.package:
    name:
      - "python2-pip"
  when: ansible_python_version is match("2.*") and ansible_os_family != 'Darwin'
  become: true

- name: Install python3-pip if Ansible uses Python 3
  ansible.builtin.package:
    name:
      - python3-pip
  when: ansible_python_version is match("3.*") and ansible_os_family != 'Darwin'
  become: true

- name: Install Python Modules
  ansible.builtin.pip:
    name: "{{ item }}"
    extra_args: --user
  loop:
    - pyvmomi
    - requests

- name: Clean up existing bin, install-dir and downloads folders
  ansible.builtin.file:
    path: "{{ playbook_dir }}/{{ item }}"
    state: absent
  with_items: ["bin", "install-dir", "downloads"]
  when: clean is defined

- name: Must always clean install-dir
  ansible.builtin.file:
    path: "{{ playbook_dir }}/{{ item }}"
    state: absent
  with_items: ["install-dir"]
  when: clean is not defined

- name: Create bin, install-dir and downloads folders
  ansible.builtin.file:
    path: "{{ playbook_dir }}/{{ item }}"
    state: directory
    mode: '0755'
  with_items: ["bin", "downloads", "downloads/ISOs", "install-dir"]

- name: Download the oc client binary
  ansible.builtin.get_url:
    mode: "0644"
    url: "{{ download.openshiftClient }}"
    dest: "{{ playbook_dir }}/downloads/oc_client.tar.gz"
    validate_certs: false
  register: oc_client_download

- name: Download the openshift-install binary
  ansible.builtin.get_url:
    mode: "0644"
    url: "{{ download.openshiftInstall }}"
    dest: "{{ playbook_dir }}/downloads/openshift_install.tar.gz"
    validate_certs: false
  register: openshift_install_download

- name: Unarchive oc client
  ansible.builtin.unarchive:
    src: "{{ playbook_dir }}/downloads/oc_client.tar.gz"
    dest: "{{ playbook_dir }}/bin"
    mode: '0775'
    exclude:
      - README.md
  when: oc_client_download is changed

- name: Unarchive openshift-install
  ansible.builtin.unarchive:
    src: "{{ playbook_dir }}/downloads/openshift_install.tar.gz"
    dest: "{{ playbook_dir }}/bin"
    mode: '0775'
    exclude:
      - README.md
  when: openshift_install_download is changed

- name: Determine mac or linux client
  ansible.builtin.set_fact:
    family: "{{ ansible_os_family if ansible_os_family == 'Darwin' else 'Linux' }}"

- name: Download govc
  ansible.builtin.get_url:
    url: "{{ download.govc }}/govc_{{ family }}_x86_64.tar.gz"
    dest: "{{ playbook_dir }}/downloads/govc.gz"
    validate_certs: false
    mode: "0644"

- name: Unarchive govc
  ansible.builtin.unarchive:
    src: "{{ playbook_dir }}/downloads/govc.gz"
    dest: "{{ playbook_dir }}/bin"
    mode: "0755"
    exclude:
      - CHANGELOG.md
      - LICENSE.txt
      - README.md

- name: Copy install-config.yaml file into install-dir
  ansible.builtin.template:
    src: "{{ playbook_dir }}/roles/common/templates/install-config.yaml.j2"
    dest: "{{ playbook_dir }}/install-dir/install-config.yaml"
    mode: '0664'

- name: Run steps pertaining to proxy, if any
  ansible.builtin.include_tasks: handle_proxy.yml
  when:
    - proxy is defined
    - proxy.enabled

- name: Backup the install-config.yaml file
  ansible.builtin.copy:
    remote_src: true
    src: "{{ playbook_dir }}/install-dir/install-config.yaml"
    dest: "{{ playbook_dir }}/install-dir/install-config.yaml.orig"
    mode: '0664'
