  - name: Upload all the custom generated ISOs to the datastore
    command: "govc datastore.upload -ds {{ vcenter.datastore }} {{ iso_dir }}/{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}.iso {{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}.iso" # noqa 301
    loop: "{{ bootstrap_vms + master_vms + worker_vms }}"

  - name: Gather some info from all control plane nodes
    vmware_guest_info:
      hostname: "{{ vcenter.ip }}"
      username: "{{ vcenter.admin_username }}"
      password: "{{ vcenter.admin_password }}"
      datacenter: "{{ vcenter.datacenter }}"
      name: "{{item.name}}.{{config.cluster_name}}.{{config.base_domain}}"
      schema: "vsphere"
      properties: ["config.name", "config.hardware.device"]
    register: control_vm_info
    loop: "{{ master_vms + bootstrap_vms }}"
    loop_control:
      label: "Gathering info from {{ item.name }}"

  - name: Gather some info from all worker nodes
    vmware_guest_info:
      hostname: "{{ vcenter.ip }}"
      username: "{{ vcenter.admin_username }}"
      password: "{{ vcenter.admin_password }}"
      datacenter: "{{ vcenter.datacenter }}"
      name: "{{item.name}}.{{config.cluster_name}}.{{config.base_domain}}"
      schema: "vsphere"
      properties: ["config.name", "config.hardware.device"]
    register: compute_vm_info
    loop: "{{ worker_vms }}"
    loop_control:
      label: "Gathering info from {{ item.name }}"
    when: "worker_vms is defined and not config.hybrid | bool"

  - name: Get list of control plane devices
    vars:
      devices: "{{ item.instance.config.hardware.device | map(attribute='_vimtype') | list }}"
    set_fact:
      control_device_list: "{{ control_device_list|default({}) | combine( { item.instance.config.name.split('.')[0]: { 'name':item.instance.config.name.split('.')[0], 'devices': devices|list } } ) }}"
    loop: "{{control_vm_info.results}}"
    loop_control:
      label: "Defining devices on {{ item.instance.config.name.split('.')[0] }}"

  - name: Get list of worker devices
    when: not config.hybrid | bool
    vars:
      devices: "{{ item.instance.config.hardware.device | map(attribute='_vimtype') | list }}"
    set_fact:
      worker_device_list: "{{ worker_device_list|default({}) | combine( { item.instance.config.name.split('.')[0]: { 'name':item.instance.config.name.split('.')[0], 'devices': devices|list } } ) }}"
    loop: "{{compute_vm_info.results}}"
    loop_control:
      label: "Defining devices on workers"

  - name: Add a cdrom device to all the boostrap and master VMs
    command: 'govc device.cdrom.add -vm "{{ vcenter.folder_absolute_path }}/{{ item.key }}.{{config.cluster_name}}.{{config.base_domain}}"' # noqa 301
    loop: "{{ control_device_list | dict2items }}"
    loop_control:
      label: "Adding cd to {{ item.key }}"
    when: "'vim.vm.device.VirtualCdrom' not in item.value.devices"

  - name: Insert the uploaded ISO file into boostrap and master VMs
    command: 'govc device.cdrom.insert -vm "{{ vcenter.folder_absolute_path }}/{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}" -ds {{ vcenter.datastore }} ./{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}.iso' # noqa 301
    loop: "{{ bootstrap_vms + master_vms }}"

  - name: Power-On the bootstrap and master VMs
    command: 'govc vm.power -on "{{ vcenter.folder_absolute_path }}/{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}"' # noqa 301
    loop: "{{ bootstrap_vms + master_vms }}"

  - name: Setup worker VMs if it not hybrid
    include: vm_worker.yml
    when: "worker_device_list is defined and worker_vms is defined"
