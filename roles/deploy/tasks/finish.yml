- name: Wait for bootstrap to complete prior to starting workers
  ansible.builtin.command: "{{ playbook_dir }}/bin/openshift-install --dir={{ playbook_dir }}/install-dir wait-for bootstrap-complete --log-level debug" # noqa no-changed-when
  retries: 180
  delay: 10
  register: result_bootstrap
  until: result_bootstrap.rc == 0

- name: Power-On the worker VMs
  community.vmware.vmware_guest:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    validate_certs: false
    folder: "{{ vcenter.folder_absolute_path }}"
    name: "{{ item.name }}.{{ config.cluster_name }}.{{ config.base_domain }}"
    state: poweredon
  loop: "{{ worker_vms | default([]) }}"
  loop_control:
    label: "Power On {{ item.name }}"
  when: not config.hybrid | bool

- name: Power-Off the bootstrap VMs
  community.vmware.vmware_guest:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    validate_certs: false
    folder: "{{ vcenter.folder_absolute_path }}"
    name: "{{ item.name }}.{{ config.cluster_name }}.{{ config.base_domain }}"
    state: poweredoff
  loop: "{{ bootstrap_vms }}"
  loop_control:
    label: "Power Off {{ item.name }}"
  when: not config.hybrid | bool

- name: Delete Bootstrap VM
  community.vmware.vmware_guest:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    validate_certs: false
    folder: "{{ vcenter.folder_absolute_path }}"
    name: "{{ item.name }}.{{ config.cluster_name }}.{{ config.base_domain }}"
    state: absent
  loop: "{{ bootstrap_vms }}"
  loop_control:
    label: "Power On {{ item.name }}"
  when: result_bootstrap.rc == 0

- name: Wait for node-bootstraper csrs to approve
  ansible.builtin.shell: >-
    {{ playbook_dir }}/bin/oc get csr -o json
    --kubeconfig={{ playbook_dir }}/install-dir/auth/kubeconfig
    | jq -r '.items[] | select(.status == {}) | .metadata.name'
  register: result_csr
  until: result_csr['stdout_lines']|count == worker_vms|count
  retries: 60
  delay: 60
  ignore_errors: true
  changed_when: false

- name: Approve the csrs
  ansible.builtin.command: "{{ playbook_dir }}/bin/oc adm certificate approve {{ item }} --kubeconfig={{ playbook_dir }}/install-dir/auth/kubeconfig" # noqa no-changed-when
  loop: "{{ result_csr['stdout_lines'] }}"

- name: Wait for system:node csrs to approve
  ansible.builtin.shell: >-
    {{ playbook_dir }}/bin/oc get csr -o json
    --kubeconfig={{ playbook_dir }}/install-dir/auth/kubeconfig
    | jq -r '.items[] | select(.status == {}) | .metadata.name'
  register: result_system
  until: result_system['stdout_lines']|count == worker_vms|count
  retries: 60
  delay: 60
  ignore_errors: true
  changed_when: false

- name: Approve the csrs
  ansible.builtin.command: "{{ playbook_dir }}/bin/oc adm certificate approve {{ item }} --kubeconfig={{ playbook_dir }}/install-dir/auth/kubeconfig" # noqa no-changed-when
  loop: "{{ result_system['stdout_lines'] }}"

- name: Create Infra List
  ansible.builtin.set_fact:
    infra_vms: "{{ worker_vms | select('search', 'isinfra') | list }}"

- name: Check for infra nodes and label accordingly
  environment:
    KUBECONFIG: "{{ playbook_dir }}/install-dir/auth/kubeconfig"
  kubernetes.core.k8s:
    state: patched
    merge_type: merge
    definition:
      apiVersion: v1
      kind: Node
      metadata:
        name: "{{ item.name }}.{{ cluster }}.{{ config.base_domain }}"
        labels:
          node-role.kubernetes.io/infra: ""
  loop: "{{ infra_vms }}"
  when: infra_vms | length > 0

- name: Change ingress controller node selector
  environment:
    KUBECONFIG: "{{ playbook_dir }}/install-dir/auth/kubeconfig"
  kubernetes.core.k8s:
    state: patched
    merge_type: merge
    definition:
      apiVersion: "operator.openshift.io/v1"
      kind: IngressController
      metadata:
        name: default
        namespace: openshift-ingress-operator
      spec:
        nodePlacement:
          nodeSelector:
            matchLabels:
              node-role.kubernetes.io/infra: ""
  when: infra_vms | length > 0

- name: Wait for install complete
  ansible.builtin.command: openshift-install wait-for install-complete --dir={{ playbook_dir }}/install-dir --log-level debug # noqa no-changed-when
  register: result_complete

- name: Output results from openshift-install wait-for install-complete
  ansible.builtin.debug:
    msg: "{{ result_complete.stderr | regex_findall('level=info.*') | list }}"
