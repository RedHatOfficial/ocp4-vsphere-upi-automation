- name: Wait for bootstrap to complete prior to starting workers
  command: "{{ playbook_dir }}/bin/openshift-install --dir={{ playbook_dir }}/install-dir wait-for bootstrap-complete --log-level debug" # noqa 301
  retries: 180
  delay: 10
  register: result_bootstrap
  until: result_bootstrap.rc == 0

- name: Power-On the worker VMs
  vmware_guest:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    validate_certs: no
    folder: "{{ vcenter.folder_absolute_path }}"
    name: "{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}"
    state: poweredon
  loop: "{{ worker_vms | default([]) }}"
  loop_control:
    label: "Power On {{ item.name }}"
  when: not config.hybrid | bool

- name: Power-Off the bootstrap VMs
  vmware_guest:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    validate_certs: no
    folder: "{{ vcenter.folder_absolute_path }}"
    name: "{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}"
    state: poweredoff
  loop: "{{ bootstrap_vms }}"
  loop_control:
    label: "Power Off {{ item.name }}"
  when: not config.hybrid | bool

- name: Delete Bootstrap VM
  vmware_guest:
    hostname: "{{ vcenter.ip }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    validate_certs: no
    folder: "{{ vcenter.folder_absolute_path }}"
    name: "{{ item.name }}.{{config.cluster_name}}.{{config.base_domain}}"
    state: absent
  loop: "{{ bootstrap_vms }}"
  loop_control:
    label: "Power On {{ item.name }}"
  when: result_bootstrap.rc == 0

- name: Approve csrs for worker nodes
  environment:
    KUBECONFIG: "{{ playbook_dir }}/install-dir/auth/kubeconfig"
  shell: |
    oc get csr -o name | xargs oc adm certificate approve &> /dev/null
    oc get nodes -l "node-role.kubernetes.io/worker=" -o name | wc -l
  register: result
  until: result.stdout | int == worker_replicas
  retries: 100
  delay: 10

- name: Create Infra List
  set_fact:
   infra_vms: "{{ worker_vms|select('search','isinfra') | list }}"

- name: Check for infra nodes and label accordingly
  environment:
   KUBECONFIG: "{{ playbook_dir }}/install-dir/auth/kubeconfig"
  k8s:
   state: patched
   merge_type: merge
   definition:
     apiVersion: v1
     kind: Node
     metadata:
       name: "{{ item.name }}.{{ cluster }}.{{ config.base_domain }}"
       labels:
         node-role.kubernetes.io/infra: ""
  loop: "{{ infra_vms }}"
  when: infra_vms | length > 0

- name: Change ingress controller node selector
  environment:
   KUBECONFIG: "{{ playbook_dir }}/install-dir/auth/kubeconfig"
  k8s:
   state: patched
   merge_type: merge
   definition:
     apiVersion: "operator.openshift.io/v1"
     kind: IngressController
     metadata:
       name: default
       namespace: openshift-ingress-operator
     spec:
      nodePlacement:
        nodeSelector:
          matchLabels:
            node-role.kubernetes.io/infra: ""
  when: infra_vms | length > 0

- name: Wait for install complete
  command: openshift-install wait-for install-complete --dir={{ playbook_dir }}/install-dir --log-level debug # noqa 301
  register: result_complete
  until: result_complete.rc == 0
  retries: 3
  delay: 5

- name: Output results from openshift-install wait-for install-complete
  debug:
   msg: "{{ result_complete.stderr | regex_findall('level=info.*') | list }}"
